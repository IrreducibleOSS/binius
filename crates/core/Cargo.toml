[package]
name = "binius_core"
version.workspace = true
edition.workspace = true
authors.workspace = true

[lints]
workspace = true

[dependencies]
assert_matches.workspace = true
auto_impl.workspace = true
binius_macros = { path = "../macros" }
binius_field = { path = "../field", default-features = false }
binius_hal = { path = "../hal" }
binius_hash = { path = "../hash", default-features = false }
binius_math = { path = "../math" }
binius_ntt = { path = "../ntt" }
binius_maybe_rayon = { path = "../maybe_rayon", default-features = false }
binius_utils = { path = "../utils", default-features = false }
bytes.workspace = true
bytemuck = { workspace = true, features = ["extern_crate_alloc"] }
derive_more.workspace = true
digest.workspace = true
either.workspace = true
getset.workspace = true
inventory.workspace = true
itertools.workspace = true
rand.workspace = true
stackalloc.workspace = true
thiserror.workspace = true
tracing.workspace = true
trait-set.workspace = true
transpose.workspace = true

[dev-dependencies]
binius_macros = { path = "../macros" }
criterion.workspace = true
groestl_crypto.workspace = true
rand = { workspace = true, features = ["std"] }

[lib]
bench = false

[[bench]]
name = "composition_poly"
harness = false

[[bench]]
name = "multilinear_query"
harness = false

[[bench]]
name = "prodcheck"
harness = false

[[bench]]
name = "binary_merkle_tree"
harness = false

[[bench]]
name = "poly_commit"
harness = false

[features]
debug_validate_sumcheck = []
